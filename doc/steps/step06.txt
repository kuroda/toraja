[[coffee05|前回]]はCoffeeScriptでAjaxのコードを書く話をしました。

今回は趣向を変えて、読者の方からのメールにお答えしようと思います。以下、メールからの抜粋です。

<blockquote>
CoffeeScripｔについては勉強しようと思っていたところへ
CoffeeScript入門が掲載され、大変タイムリーでした。
今後の展開が楽しみです。

ところで、本記事では、blockを描画していますが、これを
png等のイメーファイルに置き換えてみようと思い、
ネットで調べたり、自分で推測してプログラムを変更してみましたが、
どうもうまくいきません。
</blockquote>

いい質問です<code>:)</code>。ちょっとやってみましょうか。

=== その前に ===

いまdiv要素を追加しているところをimg要素に書き換えればよさそうですね。でもその前に、現行のソースコードを少し手直ししておきましょう。いまはこうなっています：

<pre>
$ ->
  $("div#canvas").dblclick (e) ->
    [x, y] = positionOfNewBlock(e)
    $.post '/blocks', block: { x: x, y: y }, (block_id) ->
      block = $("<div class='block' style='left: #{x}px; top: #{y}px;' />").
        data("blockId", block_id).
        draggable(containment: "parent").css(position: "absolute")
      $(e.target).append(block)

  $("div.block").draggable(containment: "parent").css(position: "absolute")

  $(document).on "dragstop", "div.block", (e) ->
    block = $(e.target)
    blockId = block.data("blockId")
    x = parseInt(block.css("left"))
    y = parseInt(block.css("top"))
    $.ajax "/blocks/#{blockId}", type: "PUT", data: { block: { x: x, y: y } }
		
positionOfNewBlock = (e) ->
  canvas = $(e.target)
  x = e.pageX - canvas.position().left
  y = e.pageY - canvas.position().top
  [x, y]
</pre>

5-7行目を次のように修正します：

<pre>
      block = $("<div />").
        addClass("block").
        css(left: "#{x}px", top: "#{y}px").
        data("blockId", block_id).
        draggable(containment: "parent").
        css(position: "absolute")
</pre>

<code>$("div class='block' />")</code> と書く代わりに <code>$("<div />").addClass("block")</code> と書いています。

また、<code>$("div style='left: #{x}px; top: #{y}px;' />")</code> と書く代わりに <code>$("<div />").css(left: "#{x}px", top: "#{y}px")</code> と書いています。

このようにclass属性やstyle属性は、文字列として埋め込まずに後からメソッドで設定することもできます。

=== 正方形の代わりに画像を表示する ===

では、メールへの回答です。

<div class="note">
本連載を今後も読み続ける方は、以下の修正を行う前に、現行のソースコードのバックアップを取ってください。次回以降は、この時点でのソースコードを起点にして話が進みます。
</div>

<code>app/views/top/index.html.erb</code> を修正。

<pre>
<div id="canvas">
  <% @blocks.each do |block| %>
  <%= image_tag("rails.png",
      data: { :"block-id" => block.id },
      style: "left: #{block.x}px; top: #{block.y}px") %>
  <% end %>
</div>
</pre>

3行目の <code>content_tag(:div, nil, class: "block"</code> を <code>image_tag("rails.png"</code> に変更しています。

<code>app/assets/stylesheets/top.css.scss</code> を修正。

<pre>
div#canvas {
  position: relative;
  width: 400px;
  height: 400px;
  background-color: silver;
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -o-user-select: none;  
  
  img {
    position: absolute;
    cursor: pointer;
  }
}
</pre>

img要素にスタイルを指定しています。<code>-moz-user-select</code> などの指定は、キャンバスをダブルクリックしたときに画像が選択されないようにするためのものです。

<code>app/assets/javascripts/top.js.coffee</code> を修正。

<pre>
$ ->
  $("div#canvas").dblclick (e) ->
    [x, y] = positionOfNewBlock(e)
    $.post '/blocks', block: { x: x, y: y }, (block_id) ->
      block = $("<img />").
        attr("src", "assets/rails.png").
        css(left: "#{x}px", top: "#{y}px").
        data("blockId", block_id).
        draggable(containment: "parent").
        css(position: "absolute")
      $(e.target).append(block)

  $("div#canvas img").draggable(containment: "parent").css(position: "absolute")

  $(document).on "dragstop", "div#canvas img", (e) ->
    block = $(e.target)
    blockId = block.data("blockId")
    x = parseInt(block.css("left"))
    y = parseInt(block.css("top"))
    $.ajax "/blocks/#{blockId}", type: "PUT", data: { block: { x: x, y: y } }
		
positionOfNewBlock = (e) ->
  canvas = $(e.target)
  x = e.pageX - canvas.position().left
  y = e.pageY - canvas.position().top
  [x, y]
</pre>

変更箇所は4点です：

* 5行目の <code>$("<div />")</code> を <code>$("<img />")</code> に変更。
* 6行目の <code>addClass("block")</code> を <code>attr("src", "assets/rails.png")</code> に変更。
* 13行目の <code>$("div.block")</code> を <code>$("div#canvas img")</code> に変更。
* 15行目の <code>"div.block"</code> を <code>"div#canvas img"</code> に変更。

img要素の<code>src</code>属性を指定するのに<code>attr</code>メソッドを使用している点に着目してください。jQueryは<code>class</code>属性と<code>style</code>属性と<code>data-*</code>を特別扱いしていて、それぞれに<code>addClass</code>と<code>css</code>と<code>data</code>という専用メソッドを用意しています。それ以外の属性については、<code>attr</code>メソッドの第1引数に属性名を指定することで値を参照したり変更したりできます。

では、動作確認しましょう。ブラウザを再読込してから、ページ上の灰色の部分を何度かダブルクリックすると次のような表示になります。

[[Image:coffee06-0|461x519|center]]

画像をドラッグして位置を変更できる点と、変更後にブラウザを再読込して画像の位置が変わらない点についても確認してください。

